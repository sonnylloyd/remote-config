{% extends "layout.njk" %}

{% block title %}Submit Configuration{% endblock %}

{% block body_class %}bg-light{% endblock %}

{% block content %}

<div class="container pb-5">

      <!-- Generator Selection -->
      <div class="bg-white p-3 mb-4 border rounded shadow-sm">
        <label for="generator" class="form-label fw-semibold">Select Configuration Generator</label>
        <select id="generator" name="generator" class="form-select">
          {% for generator in generators %}
            <option value="{{ generator }}" {% if loop.first %}selected{% endif %}>
              {{ generator }}
            </option>
          {% endfor %}
        </select>
      </div>




    <div class="bg-white p-3 mb-4 border rounded shadow-sm">

    <!-- Dynamic Form Fields -->
    <form id="config-form" class="needs-validation" novalidate>
      <div id="dynamic-fields" class="mb-3"></div>
      <button type="submit" class="btn btn-primary">Submit</button>
    </form>

    <!-- Display QR URL after form submission -->
      <div id="qr-url-section" class="mt-4 d-none">
        <h3>Configuration QR URL:</h3>
        <p id="qr-url" class="text-break"></p>
        <button class="btn btn-outline-secondary" onclick="copyToClipboard()">Copy URL</button>
      </div>
    </div>

    </div>

    <script>
      document.addEventListener('DOMContentLoaded', function () {
        const generatorSelect = document.getElementById('generator');
        const formContainer = document.getElementById('dynamic-fields');
        const form = document.getElementById('config-form');
        const qrUrlSection = document.getElementById('qr-url-section');
        const qrUrlElement = document.getElementById('qr-url');

        function loadFormFields(generator) {
          const fieldsUrl = '{{ route.FORM_FIELDS }}'.replace(':generator', generator);

          fetch(fieldsUrl)
            .then((response) => response.json())
            .then((fields) => {
              formContainer.innerHTML = ''; // Clear previous fields

              fields.forEach((field) => {
                const formGroup = document.createElement('div');
                formGroup.classList.add('mb-3');

                const label = document.createElement('label');
                label.classList.add('form-label');
                label.setAttribute('for', field.name);
                label.textContent = field.label;

                let input;

                if (field.type === 'select') {
                  input = document.createElement('select');
                  input.classList.add('form-select');
                  input.name = field.name;
                  input.required = field.required || false;

                  field.options.forEach((option) => {
                    const optionElement = document.createElement('option');
                    optionElement.value = option.value;
                    optionElement.textContent = option.label;
                    input.appendChild(optionElement);
                  });

                  if (field.defaultValue) {
                    input.value = field.defaultValue;
                  }

                } else {
                  input = document.createElement('input');
                  input.classList.add('form-control');
                  input.type = field.type || 'text';
                  input.name = field.name;
                  input.required = field.required || false;

                  // Set default value if available
                  if (field.defaultValue) {
                    input.value = field.defaultValue;
                  }

                  if (field.hint) {
                    input.setAttribute('aria-describedby', `${field.name}-hint`);
                  }
                }

                formGroup.appendChild(label);
                formGroup.appendChild(input);

                // Add hint text below the field if it exists
                if (field.hint) {
                  const hint = document.createElement('div');
                  hint.classList.add('form-text');
                  hint.id = `${field.name}-hint`;
                  hint.textContent = field.hint;
                  formGroup.appendChild(hint);
                }

                // Append the field label and input to the form container
                formContainer.appendChild(formGroup);
              });
            });
        }

        // Initial form fields for the default selected generator
        loadFormFields(generatorSelect.value);

        // Handle generator selection change
        generatorSelect.addEventListener('change', function () {
          loadFormFields(this.value);
        });

        // Handle form submission
        form.addEventListener('submit', function (event) {
          event.preventDefault();

          const formData = new FormData(form);
          const data = {};
          formData.forEach((value, key) => {
            data[key] = value;
          });

          const submitUrl = '{{ route.SUBMIT_FORM }}'.replace(
            ':generator',
            generatorSelect.value
          );

          fetch(submitUrl, {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify(data),
          })
            .then((response) => response.json())
            .then((result) => {
              // Show the QR URL section and populate the URL
              if (result.qr) {
                qrUrlElement.textContent = result.qr;
                qrUrlSection.classList.remove('d-none');
              }
            });
        });

        // Copy QR URL to clipboard
        function copyToClipboard() {
          const qrUrl = qrUrlElement.textContent;
          navigator.clipboard.writeText(qrUrl).then(() => {
            alert('QR URL copied to clipboard!');
          });
        }
      });
    </script>
{% endblock %}